package main

import "testing"

func TestHello(t *testing.T) {

	assertCorrectMessage := func(t *testing.T, got, want string) {
		t.Helper()
		if got != want {
			t.Errorf("got '%q' want '%q'", got, want)
		}
	}

	t.Run("in Spanish", func(t *testing.T) {
		got := Hello("Elodie", "Spanish")
		want := "Hola, Elodie"
		assertCorrectMessage(t, got, want)
	})

}

/*  编写测试
编写测试和函数很类似，其中有一些规则
程序需要在一个名为 xxx_test.go 的文件中编写
测试函数的命名必须以单词 Test 开始
测试函数只接受一个参数 t *testing.T
现在这些信息足以让我们明白
类型为 *testing.T 的变量 t 是你在测试框架中的 hook（钩子）
所以当你想让测试失败时可以执行 t.Fail() 之类的操作

t.Errorf
我们调用 t 的 Errorf 方法打印一条消息并使测试失败。f 表示格式化，它允许我们构建一个字符串，并将值插入占位符值 %q 中。当你的测试失败时，它能够让你清楚是什么错误导致的。
稍后我们将探讨方法和函数之间的区别

这里我们将介绍测试库中的另一个工具 -- 子测试。有时，对一个「事情」进行分组测试，然后再对不同场景进行子测试非常有效。
这种方法的好处是，你可以建立在其他测试中也能够使用的共享代码。
当我们检查信息是否符合预期时，会有重复的代码。
重构不 仅仅 是针对程序的代码！
重要的是，你的测试 清楚地说明 了代码需要做什么。
我们可以并且应该重构我们的测试。

我们将断言重构为函数。这减少了重复并且提高了测试的可读性。
在 Go 中，你可以在其他函数中声明函数并将它们分配给变量。
你可以像调用普通函数一样调用它们。
我们需要传入 t *testing.T，这样我们就可以在需要的时候令测试代码失败。
t.Helper() 需要告诉测试套件这个方法是辅助函数（helper）。
通过这样做，当测试失败时所报告的行号将在函数调用中而不是在辅助函数内部。
这将帮助其他开发人员更容易地跟踪问题。
如果你仍然不理解，请注释掉它，使测试失败并观察测试输出

规律
让我们再次回顾一下这个周期
编写一个测试
让编译通过
运行测试，查看失败原因并检查错误消息是很有意义的
编写足够的代码以使测试通过
重构

*/
